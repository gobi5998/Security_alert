import 'package:flutter/material.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:hive/hive.dart';
import 'package:security_alert/custom/customButton.dart';
import 'package:security_alert/screens/malware/report_malware_2.dart';
import '../../custom/CustomDropdown.dart';
import '../../custom/customTextfield.dart';
import '../../models/malware_report_model.dart';
import 'malware_report_service.dart';

class MalwareReportPage1 extends StatefulWidget {
  final String categoryId;
  const MalwareReportPage1({required this.categoryId});

  @override
  State<MalwareReportPage1> createState() => _MalwareReportPage1State();
}

class _MalwareReportPage1State extends State<MalwareReportPage1> {
  String? _DetectedSeverity;
  String? _infectedSystem;
  String? _Malwaretype;
  String? _operatingSystem;
  String? _location;
  String? malwareTypeId;
  List<Map<String, dynamic>> malwareTypes = [];
  bool isOnline = true;

  final TextEditingController _operatingSystemController =
      TextEditingController();
  final TextEditingController _locationController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadMalwareTypes();
    _setupNetworkListener();
  }

  void _setupNetworkListener() {
    Connectivity().onConnectivityChanged.listen((result) {
      setState(() => isOnline = result != ConnectivityResult.none);
      if (isOnline) MalwareReportService.syncReports();
    });
  }

  Future<void> _loadMalwareTypes() async {
    final box = await Hive.openBox('malware_types');
    // Try to load from Hive first
    final raw = box.get(widget.categoryId);
    List<Map<String, dynamic>>? cachedTypes;
    if (raw != null) {
      cachedTypes = (raw as List)
          .map((e) => Map<String, dynamic>.from(e as Map))
          .toList();
    }

    if (cachedTypes != null && cachedTypes.isNotEmpty) {
      malwareTypes = cachedTypes;
      setState(() {});
    }

    // Always try to fetch latest from backend in background
    try {
      final latestTypes = await MalwareReportService.fetchReportTypesByCategory(
        widget.categoryId,
      );
      if (latestTypes != null && latestTypes.isNotEmpty) {
        malwareTypes = latestTypes;
        await box.put(widget.categoryId, latestTypes);
        setState(() {});
      }
    } catch (e) {
      // If offline or error, just use cached
      print('Failed to fetch latest malware types: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Report Malware')),
      body: LayoutBuilder(
        builder: (context, constraints) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: constraints.maxHeight),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 8),
                  CustomDropdown(
                    hint: "Select a Malware Type",
                    value: malwareTypes.isNotEmpty
                        ? malwareTypes.firstWhere(
                            (e) => e['_id'] == malwareTypeId,
                            orElse: () => {'name': null},
                          )['name']
                        : _Malwaretype,
                    items: malwareTypes.isNotEmpty
                        ? malwareTypes.map((e) => e['name'] as String).toList()
                        : const [
                            'Virus',
                            'Worm',
                            'Trojan',
                            'Spyware',
                            'Ransomware',
                            'Adware',
                          ],
                    onChanged: (val) {
                      setState(() {
                        if (malwareTypes.isNotEmpty) {
                          malwareTypeId = malwareTypes.firstWhere(
                            (e) => e['name'] == val,
                          )['_id'];
                        }
                        _Malwaretype = val;
                      });
                    },
                    label: "Malware Type*",
                  ),
                  const SizedBox(height: 8),
                  CustomDropdown(
                    hint: "Select a Device Type",
                    value: _infectedSystem,
                    items: const [
                      'Desktop',
                      'Laptop',
                      'Mobile',
                      'IOT Devices',
                      'Others',
                    ],
                    onChanged: (val) => setState(() => _infectedSystem = val),
                    label: 'Infected Device Type*',
                  ),
                  const SizedBox(height: 23),

                  CustomTextField(
                    controller: _operatingSystemController,
                    hintText: 'Windows, Mac, Android, etc',
                    label: 'Operating System',
                    validator: (val) =>
                        val == null || val.isEmpty ? 'Required' : null,
                    onChanged: (val) => _operatingSystem = val,
                  ),
                  const SizedBox(height: 23),
                  CustomDropdown(
                    hint: "Select a Scam Type",
                    value: _DetectedSeverity,
                    items: const [
                      'Virus',
                      'Worm',
                      'Trojan',
                      'Spyware',
                      'Ransomware',
                      'Adware',
                    ],
                    onChanged: (val) => setState(() => _DetectedSeverity = val),
                    label: 'How was it Detected',
                  ),
                  const SizedBox(height: 8),

                  const SizedBox(height: 8),
                  CustomTextField(
                    controller: _locationController,
                    hintText: 'City, State',
                    label: 'Location',
                    validator: (val) =>
                        val == null || val.isEmpty ? 'Required' : null,
                    onChanged: (val) => _location = val,
                  ),
                  const SizedBox(height: 20),

                  // ElevatedButton(
                  //   onPressed: () => Navigator.push(
                  //     context,
                  //     MaterialPageRoute(builder: (_) => const MalwareReportPage2()),
                  //   ),
                  //
                  //   style: ElevatedButton.styleFrom(
                  //     shape: RoundedRectangleBorder(
                  //       borderRadius: BorderRadius.circular(6),
                  //     ),
                  //     backgroundColor: const Color(0xFF064FAD),
                  //     minimumSize: const Size(double.infinity, 48),
                  //   ),
                  //   child: const Text("Next", style: TextStyle(color: Colors.white)),
                  // ),
                  CustomButton(
                    text: 'Next',
                    onPressed: () async {
                      // Validate required fields
                      if (malwareTypeId == null ||
                          _infectedSystem == null ||
                          _operatingSystemController.text.isEmpty ||
                          _locationController.text.isEmpty) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Please fill all required fields'),
                          ),
                        );
                        return;
                      }

                      // Create malware report model
                      final malwareReport = MalwareReportModel(
                        id: DateTime.now().millisecondsSinceEpoch.toString(),
                        malwareType: _Malwaretype!,
                        infectedDeviceType: _infectedSystem!,
                        operatingSystem: _operatingSystemController.text,
                        detectionMethod: _DetectedSeverity ?? 'Unknown',
                        location: _locationController.text,
                        fileName: '',
                        name: '',
                        systemAffected: '',
                        alertSeverityLevel: '',
                        date: DateTime.now(),
                      );

                      // Save to local storage
                      try {
                        await MalwareReportService.saveReport(malwareReport);
                      } catch (e) {
                        print('Save failed but continuing: $e');
                      }

                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) =>
                              MalwareReportPage2(report: malwareReport),
                        ),
                      );
                    },
                    fontSize: 20,
                    borderCircular: 6,
                    fontWeight: FontWeight.bold,
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
