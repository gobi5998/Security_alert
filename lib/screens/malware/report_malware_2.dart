// malware_report_page.dart
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:security_alert/custom/CustomDropdown.dart';
import '../../custom/Success_page.dart';
import '../../custom/customButton.dart';
import '../../custom/customTextfield.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';


class MalwareReportPage2 extends StatefulWidget {
  const MalwareReportPage2({super.key});

  @override
  State<MalwareReportPage2> createState() => _MalwareReportPage2State();
}

class _MalwareReportPage2State extends State<MalwareReportPage2> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _systemAffectedController = TextEditingController();
  String? _selectedSeverity;

  List<File> selectedScreenshots = [];
  List<File> selectedDocuments = [];
  final ImagePicker _imagePicker = ImagePicker();

  // Pick screenshots (camera or gallery)
  Future<void> _pickScreenshots() async {
    final choice = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Select Screenshots'),
        content: const Text('Choose how you want to add screenshots'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop('camera'),
            child: const Text('Camera'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop('gallery'),
            child: const Text('Gallery'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
    if (choice == null) return;

    List<XFile> images = [];
    if (choice == 'camera') {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.camera,
        maxWidth: 1920,
        maxHeight: 1080,
        imageQuality: 85,
      );
      if (image != null) images.add(image);
    } else if (choice == 'gallery') {
      images = await _imagePicker.pickMultiImage(
        maxWidth: 1920,
        maxHeight: 1080,
        imageQuality: 85,
      );
    }

    if (images.isNotEmpty) {
      setState(() {
        for (var image in images) {
          if (selectedScreenshots.length < 5) {
            selectedScreenshots.add(File(image.path));
          } else {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Maximum 5 screenshots allowed')),
            );
            break;
          }
        }
      });
    }
  }

  // Pick documents (pdf, doc, docx, txt, exe, zip, etc.)
  Future<void> _pickDocuments() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc', 'docx', 'txt', 'exe', 'zip', 'jpg', 'jpeg', 'png'],
    );
    if (result != null) {
      setState(() {
        for (var file in result.files) {
          if (file.path != null) {
            selectedDocuments.add(File(file.path!));
          }
        }
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Added  {result.files.length} file(s)')),
      );
    }
  }

  void _removeScreenshot(int index) {
    setState(() {
      selectedScreenshots.removeAt(index);
    });
  }

  void _removeDocument(int index) {
    setState(() {
      selectedDocuments.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Report Malware')),
      body: LayoutBuilder(
        builder: (context, constraints) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: constraints.maxHeight),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      "Upload evidence (screenshots, documents)",
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    // Screenshots Section
                    Column(
                      children: [
                        ListTile(
                          leading: Icon(Icons.image),
                          title: const Text('Add Screenshots'),
                          subtitle: Text('Selected:  {selectedScreenshots.length}/5'),
                          onTap: _pickScreenshots,
                        ),
                      ],
                    ),
                    // Display selected screenshots
                    if (selectedScreenshots.isNotEmpty) ...[
                      const SizedBox(height: 8),
                      SizedBox(
                        height: 100,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: selectedScreenshots.length,
                          itemBuilder: (context, index) {
                            return Padding(
                              padding: const EdgeInsets.only(right: 8),
                              child: Stack(
                                children: [
                                  Container(
                                    width: 100,
                                    height: 100,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(8),
                                      border: Border.all(color: Colors.grey),
                                    ),
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(8),
                                      child: Image.file(
                                        selectedScreenshots[index],
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                  ),
                                  Positioned(
                                    top: 4,
                                    right: 4,
                                    child: GestureDetector(
                                      onTap: () => _removeScreenshot(index),
                                      child: Container(
                                        padding: const EdgeInsets.all(2),
                                        decoration: const BoxDecoration(
                                          color: Colors.red,
                                          shape: BoxShape.circle,
                                        ),
                                        child: const Icon(
                                          Icons.close,
                                          color: Colors.white,
                                          size: 16,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            );
                          },
                        ),
                      ),
                    ],
                    const SizedBox(height: 16),
                    // Documents Section
                    Column(
                      children: [
                        ListTile(
                          leading: Icon(Icons.description),
                          title: const Text('Add Documents'),
                          subtitle: Text('Selected:  {selectedDocuments.length} files'),
                          onTap: _pickDocuments,
                        ),
                      ],
                    ),
                    // Display selected documents
                    if (selectedDocuments.isNotEmpty) ...[
                      const SizedBox(height: 8),
                      ...selectedDocuments.asMap().entries.map((entry) {
                        int index = entry.key;
                        File file = entry.value;
                        return Card(
                          child: ListTile(
                            leading: const Icon(Icons.description),
                            title: Text(file.path.split('/').last),
                            subtitle: Text(
                              ' {(file.lengthSync() / 1024).toStringAsFixed(1)} KB',
                            ),
                            trailing: IconButton(
                              icon: const Icon(Icons.close, color: Colors.red),
                              onPressed: () => _removeDocument(index),
                            ),
                          ),
                        );
                      }).toList(),
                    ],
                    const SizedBox(height: 24),
                    const Text("Report malware attack details", style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 16),
                    CustomTextField(
                      controller: _nameController,
                      hintText: "Enter name",
                      label: 'Name',
                      
                    ),
                    const SizedBox(height: 16),
                    CustomTextField(
                      controller: _systemAffectedController,
                      hintText: "Enter system name",
                      label: 'System Affected',
                      
                    ),
                    const SizedBox(height: 16),
                    CustomDropdown(
                      hint: "Select a Severity Level",
                      value: _selectedSeverity,
                      items: const ['High', 'Medium', 'Low'],
                      onChanged: (val) => setState(() => _selectedSeverity = val),
                      label: 'Alert Severity Levels',
                    ),
                    const SizedBox(height: 24),
                    CustomButton(
                      text: 'Submit',
                      onPressed: () async {
                        if (!_formKey.currentState!.validate()) return;
                        if (selectedScreenshots.isEmpty && selectedDocuments.isEmpty) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('Please add at least one screenshot or document.'),
                              backgroundColor: Colors.red,
                            ),
                          );
                          return;
                        }
                        if (_selectedSeverity == null || _selectedSeverity!.isEmpty) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('Please select a severity level.'),
                              backgroundColor: Colors.red,
                            ),
                          );
                          return;
                        }
                        // Proceed with save/submit logic here
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const ReportSuccess(label: 'Malware Report'),
                          ),
                        );
                      },
                      fontSize: 20,
                      borderCircular: 6,
                      fontWeight: FontWeight.bold,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
