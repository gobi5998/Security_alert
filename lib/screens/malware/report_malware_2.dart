import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:security_alert/custom/CustomDropdown.dart';
import 'package:security_alert/custom/fileUpload.dart';
import '../../custom/Success_page.dart';
import '../../custom/customButton.dart';
import '../../custom/customTextfield.dart';
import '../../models/malware_report_model.dart';
import 'malware_report_service.dart';
import '../../services/api_service.dart';
import '../../config/api_config.dart';
import 'package:hive/hive.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import '../../services/jwt_service.dart';
import '../../services/token_storage.dart';
import 'dart:convert';

class MalwareReportPage2 extends StatefulWidget {
  final MalwareReportModel report;
  const MalwareReportPage2({super.key, required this.report});

  @override
  State<MalwareReportPage2> createState() => _MalwareReportPageState();
}

class _MalwareReportPageState extends State<MalwareReportPage2> {
  PlatformFile? selectedFile;
  final _formKey = GlobalKey<FormState>();
  final GlobalKey<FileUploadWidgetState> _fileUploadKey =
      GlobalKey<FileUploadWidgetState>(debugLabel: 'malware_file_upload');

  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _systemAffectedController =
      TextEditingController();
  String? _selectedSeverity;
  String? _selectedSeverityId; // Add ID field for backend compatibility
  List<Map<String, dynamic>> alertLevelOptions = []; // Add alert level options

  @override
  void initState() {
    super.initState();
    _loadAlertLevels();
  }

  Future<void> _loadAlertLevels() async {
    try {
      print('üîç Loading alert levels from API...');
      print(
        'üîç Backend URL: ${ApiConfig.mainBaseUrl}${ApiConfig.alertLevelsEndpoint}',
      );

      // Try to fetch alert levels from backend
      try {
        final apiService = ApiService();
        final alertLevels = await apiService.fetchAlertLevels();

        if (alertLevels.isNotEmpty) {
          if (mounted) {
            setState(() {
              alertLevelOptions = alertLevels;
            });
            print('‚úÖ Loaded ${alertLevels.length} alert levels from API');
            print(
              '‚úÖ Alert levels: ${alertLevels.map((level) => '${level['name']} (${level['_id']})').join(', ')}',
            );
          }
        } else {
          print('‚ùå No alert levels returned from API');
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('No alert levels available from server'),
                backgroundColor: Colors.orange,
                duration: Duration(seconds: 3),
              ),
            );
          }
        }
      } catch (e) {
        print('‚ùå Error loading alert levels from API: $e');
        print('üîç Showing error message to user...');

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Failed to load alert levels from server. Please check your connection and try again.',
              ),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 5),
            ),
          );
        }
      }
    } catch (e) {
      print('‚ùå Error loading alert levels: $e');
    }
  }

  void pickFile() async {
    final result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['exe', 'zip', 'jpg', 'jpeg', 'png'],
      withData: true,
    );

    if (result != null) {
      final file = result.files.first;
      if (file.size > 10 * 1024 * 1024) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('File size exceeds 10MB')));
        return;
      }
      setState(() {
        selectedFile = file;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Report Malware')),
      body: LayoutBuilder(
        builder: (context, constraints) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: constraints.maxHeight),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      "Upload infected files",
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    FileUploadWidget(
                      key: _fileUploadKey,
                      config: FileUploadConfig(
                        reportId: widget.report.id ?? '123',
                        reportType: 'malware',
                        autoUpload: true,
                        showProgress: true,
                        maxFileSize: 10,
                      ),
                      onFilesUploaded: (files) {
                        print('Files uploaded: $files');
                      },
                      onError: (error) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Upload failed: $error'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      },
                    ),
                    const SizedBox(height: 24),

                    const Text(
                      "Report malware attack details",
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 16),

                    CustomTextField(
                      controller: _nameController,
                      hintText: "Enter name",
                      label: 'Name',
                      validator: (val) =>
                          val == null || val.isEmpty ? 'Required' : null,
                    ),
                    const SizedBox(height: 16),

                    CustomTextField(
                      controller: _systemAffectedController,
                      hintText: "Enter system name",
                      label: 'System Affected',
                      validator: (val) =>
                          val == null || val.isEmpty ? 'Required' : null,
                    ),
                    const SizedBox(height: 16),

                    Row(
                      children: [
                        Expanded(
                          child: CustomDropdown(
                            hint: "Select Severity Level",
                            value: _selectedSeverity,
                            items: alertLevelOptions.isNotEmpty
                                ? alertLevelOptions
                                      .map((level) => level['name'] as String)
                                      .toList()
                                : ['Loading...'],
                            onChanged: (val) {
                              if (val != null && alertLevelOptions.isNotEmpty) {
                                try {
                                  final selectedLevel = alertLevelOptions
                                      .firstWhere(
                                        (level) => level['name'] == val,
                                        orElse: () => <String, dynamic>{},
                                      );
                                  if (selectedLevel.isNotEmpty) {
                                    _selectedSeverityId = selectedLevel['_id'];
                                    print(
                                      '‚úÖ Selected alert level: $val with ID: $_selectedSeverityId',
                                    );
                                  } else {
                                    print(
                                      '‚ùå Could not find alert level ID for: $val',
                                    );
                                    print(
                                      '‚ùå Available options: ${alertLevelOptions.map((e) => e['name']).toList()}',
                                    );
                                    _selectedSeverityId = null;
                                  }
                                } catch (e) {
                                  print('‚ùå Error finding alert level ID: $e');
                                  _selectedSeverityId = null;
                                }
                              } else {
                                _selectedSeverityId = null;
                                print('üîç Alert level cleared');
                              }
                              setState(() {
                                _selectedSeverity = val;
                              });
                            },
                            label: 'Alert Severity Levels',
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          onPressed: () {
                            _loadAlertLevels();
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('Refreshing alert levels...'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                          },
                          icon: const Icon(Icons.refresh),
                          tooltip: 'Refresh Alert Levels',
                        ),
                      ],
                    ),

                    // Debug info for alert levels
                    if (alertLevelOptions.isEmpty)
                      Container(
                        margin: const EdgeInsets.only(top: 8),
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.orange[50],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.orange[200]!),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              Icons.info_outline,
                              color: Colors.orange[600],
                              size: 16,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                'Alert levels not loaded. Tap refresh button to retry.',
                                style: TextStyle(
                                  color: Colors.orange[700],
                                  fontSize: 12,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),

                    const SizedBox(height: 24),
                    CustomButton(
                      text: 'Submit',
                      onPressed: () async {
                        // Validate required fields
                        if (_nameController.text.isEmpty ||
                            _systemAffectedController.text.isEmpty ||
                            _selectedSeverity == null) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('Please fill all required fields'),
                            ),
                          );
                          return;
                        }

                        try {
                          // Upload files first
                          Map<String, dynamic> uploadedFiles = {
                            'screenshots': [],
                            'documents': [],
                            'voiceMessages': [],
                          };

                          if (_fileUploadKey.currentState != null) {
                            uploadedFiles = await _fileUploadKey.currentState!
                                .triggerUpload();
                          }

                          // Extract URLs from categorized files
                          List<String> screenshotUrls =
                              (uploadedFiles['screenshots'] as List)
                                  .map((f) => f['url']?.toString() ?? '')
                                  .where((url) => url.isNotEmpty)
                                  .toList();

                          List<String> documentUrls =
                              (uploadedFiles['documents'] as List)
                                  .map((f) => f['url']?.toString() ?? '')
                                  .where((url) => url.isNotEmpty)
                                  .toList();

                          List<String> voiceMessageUrls =
                              (uploadedFiles['voiceMessages'] as List)
                                  .map((f) => f['url']?.toString() ?? '')
                                  .where((url) => url.isNotEmpty)
                                  .toList();

                          // Update the report with final data
                          final updatedReport = widget.report.copyWith(
                            name: _nameController.text,
                            systemAffected: _systemAffectedController.text,
                            alertSeverityLevel: _selectedSeverity!,
                            alertLevels:
                                _selectedSeverityId, // Add the alert level ID for backend
                            fileName: selectedFile?.name ?? '',
                            screenshotUrls: screenshotUrls,
                            voiceMessageUrls: voiceMessageUrls,
                            documentUrls: documentUrls,
                          );

                          // Save the report with auto-sync
                          await MalwareReportService.saveReport(updatedReport);

                          print(
                            '‚úÖ Malware report saved and duplicates cleaned up',
                          );

                          // Navigate to success page
                          if (mounted) {
                            Navigator.pushAndRemoveUntil(
                              context,
                              MaterialPageRoute(
                                builder: (context) => const ReportSuccess(
                                  label: 'Malware Report',
                                ),
                              ),
                              (route) => false,
                            );
                          }
                        } catch (e) {
                          print('Error saving malware report: $e');
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('Error saving report: $e')),
                          );
                        }
                      },
                      fontSize: 20,
                      borderCircular: 6,
                      fontWeight: FontWeight.bold,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
