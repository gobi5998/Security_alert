export interface IMalwareReport {
  id: string;
  malwareType?: string;
  infectedDeviceType?: string;
  operatingSystem?: string;
  detectionMethod?: string;
  location?: string;
  fileName?: string;
  name?: string;
  systemAffected?: string;
  alertSeverityLevel?: string;
  userId?: string;
  status: 'pending' | 'submitted' | 'processed' | 'resolved';
  createdAt: Date;
  updatedAt: Date;
}

export interface ICreateMalwareReport {
  malwareType?: string;
  infectedDeviceType?: string;
  operatingSystem?: string;
  detectionMethod?: string;
  location?: string;
  fileName?: string;
  name?: string;
  systemAffected?: string;
  alertSeverityLevel?: string;
  userId?: string;
}

export interface IUpdateMalwareReport {
  malwareType?: string;
  infectedDeviceType?: string;
  operatingSystem?: string;
  detectionMethod?: string;
  location?: string;
  fileName?: string;
  name?: string;
  systemAffected?: string;
  alertSeverityLevel?: string;
  status?: 'pending' | 'submitted' | 'processed' | 'resolved';
}

// Mock data for development
export const mockMalwareReports: IMalwareReport[] = [
  {
    id: '1',
    malwareType: 'Trojan',
    infectedDeviceType: 'Desktop',
    operatingSystem: 'Windows 10',
    detectionMethod: 'Antivirus scan',
    location: 'Downloads folder',
    fileName: 'suspicious_file.exe',
    name: 'John Doe',
    systemAffected: 'Personal Computer',
    alertSeverityLevel: 'High',
    userId: '1',
    status: 'submitted',
    createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago
    updatedAt: new Date(Date.now() - 24 * 60 * 60 * 1000),
  },
  {
    id: '2',
    malwareType: 'Ransomware',
    infectedDeviceType: 'Laptop',
    operatingSystem: 'macOS',
    detectionMethod: 'Manual detection',
    location: 'Documents folder',
    fileName: 'encrypted_files',
    name: 'Jane Smith',
    systemAffected: 'Work Laptop',
    alertSeverityLevel: 'Critical',
    userId: '1',
    status: 'processed',
    createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000), // 12 hours ago
    updatedAt: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago
  },
  {
    id: '3',
    malwareType: 'Spyware',
    infectedDeviceType: 'Mobile',
    operatingSystem: 'Android',
    detectionMethod: 'Security app alert',
    location: 'App downloads',
    fileName: 'fake_app.apk',
    name: 'Mike Johnson',
    systemAffected: 'Smartphone',
    alertSeverityLevel: 'Medium',
    userId: '1',
    status: 'pending',
    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
  },
];

export class MalwareReportService {
  private reports: IMalwareReport[] = [...mockMalwareReports];

  async findAll(userId?: string): Promise<IMalwareReport[]> {
    if (userId) {
      return this.reports.filter(report => report.userId === userId);
    }
    return this.reports;
  }

  async findById(id: string): Promise<IMalwareReport | null> {
    return this.reports.find(report => report.id === id) || null;
  }

  async findByStatus(status: string, userId?: string): Promise<IMalwareReport[]> {
    let filteredReports = this.reports.filter(report => report.status === status);
    if (userId) {
      filteredReports = filteredReports.filter(report => report.userId === userId);
    }
    return filteredReports;
  }

  async create(reportData: ICreateMalwareReport): Promise<IMalwareReport> {
    const newReport: IMalwareReport = {
      ...reportData,
      id: this.generateId(),
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date(),
    };
    
    this.reports.push(newReport);
    return newReport;
  }

  async update(id: string, updateData: IUpdateMalwareReport): Promise<IMalwareReport | null> {
    const reportIndex = this.reports.findIndex(report => report.id === id);
    if (reportIndex === -1) return null;

    this.reports[reportIndex] = {
      ...this.reports[reportIndex],
      ...updateData,
      updatedAt: new Date(),
    };

    return this.reports[reportIndex];
  }

  async delete(id: string): Promise<boolean> {
    const reportIndex = this.reports.findIndex(report => report.id === id);
    if (reportIndex === -1) return false;

    this.reports.splice(reportIndex, 1);
    return true;
  }

  async submit(id: string): Promise<IMalwareReport | null> {
    return this.update(id, { status: 'submitted' });
  }

  async process(id: string): Promise<IMalwareReport | null> {
    return this.update(id, { status: 'processed' });
  }

  async resolve(id: string): Promise<IMalwareReport | null> {
    return this.update(id, { status: 'resolved' });
  }

  async getStats(userId?: string): Promise<{
    total: number;
    pending: number;
    submitted: number;
    processed: number;
    resolved: number;
  }> {
    const userReports = userId 
      ? this.reports.filter(report => report.userId === userId)
      : this.reports;

    const total = userReports.length;
    const pending = userReports.filter(report => report.status === 'pending').length;
    const submitted = userReports.filter(report => report.status === 'submitted').length;
    const processed = userReports.filter(report => report.status === 'processed').length;
    const resolved = userReports.filter(report => report.status === 'resolved').length;

    return { total, pending, submitted, processed, resolved };
  }

  private generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }
} 