import { Request, Response } from 'express';
import { MalwareReportService, ICreateMalwareReport, IUpdateMalwareReport } from '../models/MalwareReport';
import { AuthRequest } from '../middleware/auth';

export class MalwareReportController {
  private static reportService = new MalwareReportService();

  static async getAllReports(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.id;
      const reports = await MalwareReportController.reportService.findAll(userId);

      res.status(200).json({
        success: true,
        data: reports,
        count: reports.length
      });
    } catch (error) {
      console.error('Get all reports error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async getReportById(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const report = await MalwareReportController.reportService.findById(id);

      if (!report) {
        res.status(404).json({
          success: false,
          message: 'Report not found'
        });
        return;
      }

      res.status(200).json({
        success: true,
        data: report
      });
    } catch (error) {
      console.error('Get report by ID error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async createReport(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.id;
      const reportData: ICreateMalwareReport = {
        ...req.body,
        userId
      };

      const newReport = await MalwareReportController.reportService.create(reportData);

      res.status(201).json({
        success: true,
        message: 'Report created successfully',
        data: newReport
      });
    } catch (error) {
      console.error('Create report error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async updateReport(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const updateData: IUpdateMalwareReport = req.body;

      const updatedReport = await MalwareReportController.reportService.update(id, updateData);

      if (!updatedReport) {
        res.status(404).json({
          success: false,
          message: 'Report not found'
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: 'Report updated successfully',
        data: updatedReport
      });
    } catch (error) {
      console.error('Update report error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async deleteReport(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const deleted = await MalwareReportController.reportService.delete(id);

      if (!deleted) {
        res.status(404).json({
          success: false,
          message: 'Report not found'
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: 'Report deleted successfully'
      });
    } catch (error) {
      console.error('Delete report error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async submitReport(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const submittedReport = await MalwareReportController.reportService.submit(id);

      if (!submittedReport) {
        res.status(404).json({
          success: false,
          message: 'Report not found'
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: 'Report submitted successfully',
        data: submittedReport
      });
    } catch (error) {
      console.error('Submit report error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async processReport(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const processedReport = await MalwareReportController.reportService.process(id);

      if (!processedReport) {
        res.status(404).json({
          success: false,
          message: 'Report not found'
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: 'Report processed successfully',
        data: processedReport
      });
    } catch (error) {
      console.error('Process report error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async resolveReport(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const resolvedReport = await MalwareReportController.reportService.resolve(id);

      if (!resolvedReport) {
        res.status(404).json({
          success: false,
          message: 'Report not found'
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: 'Report resolved successfully',
        data: resolvedReport
      });
    } catch (error) {
      console.error('Resolve report error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async getReportsByStatus(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.id;
      const { status } = req.params;
      
      const reports = await MalwareReportController.reportService.findByStatus(status, userId);

      res.status(200).json({
        success: true,
        data: reports,
        count: reports.length
      });
    } catch (error) {
      console.error('Get reports by status error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }

  static async getReportStats(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.id;
      const stats = await MalwareReportController.reportService.getStats(userId);

      res.status(200).json({
        success: true,
        data: stats
      });
    } catch (error) {
      console.error('Get report stats error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      });
    }
  }
} 